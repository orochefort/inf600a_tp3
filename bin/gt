#!/usr/bin/env ruby
#-*- ruby -*- # Pour etre en mode Ruby dans emacs
require 'gli'
require 'fileutils'
begin # XXX: Remove this begin/rescue before distributing your app
  require 'gt'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/taux` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/taux now"
  exit 64
end

# ---------- Alias et constantes

# Des alias, pour alleger le code.
GT = GestionTaux
ENTREPOT = GestionTaux::EntrepotDevises

# Attributs lies au type de BD utilise.
BD = BDTexte

# BD textuelle style CSV.
FORMAT_BD_TEXTE = :csv
SEPARATEUR_BD_TEXTE = ';'
DEPOT_DEFAUT = '.taux.txt' # Fichier par defaut pour depot.

# Injection des dependances pour la BD textuelle.
BD.config(FORMAT_BD_TEXTE, GestionTaux::Devise,
          separateur: SEPARATEUR_BD_TEXTE,
          exception_a_signaler: GestionTaux::Exception)

# ---------- Specification de l'application avec GLI

class App
  extend GLI::App

  program_desc 'Un programme pour la gestion de taux de change'

  version GT::VERSION

  subcommand_option_handling :normal
  arguments :strict

  desc 'Depot de donnees a utiliser pour les taux'
  default_value DEPOT_DEFAUT
  flag :depot

  desc 'Utilisation de stdin plutot que le depot'
  switch [:stdin, :'']

  # ---------- Specification des differentes commandes possibles

  # =================================
  # Commande ajouter
  #
  # Arguments: [-a|--append] devise *devises_conversion
  #
  # Erreurs:
  # - Depot invalide (- ne peut pas etre utilise)
  # - Nombre d'arguments incorrect
  # =================================
  desc 'Ajoute une devise ainsi que ses differentes devises de conversion au depot'
  arg_name 'devise devise_conversion'
  command :ajouter do |ajouter|
    ajouter.desc 'Si <devise> existe deja dans la bd, ajoute <*devises_conversion> a la liste existante des devises de conversion'
    ajouter.switch [:a, :append], negatable: false

    ajouter.action do |global_options, options, args|
      devise, *devises_conversion = args
      erreur_nombre_incorrect_arguments :ajouter, *args if args.size < 2

      if options[:append]
        ENTREPOT.ajouter_devises_conversion(devise, *devises_conversion)
      else
        ENTREPOT.ajouter(devise, *devises_conversion)
      end
    end
  end

  # =================================
  # Commande supprimer
  #
  # Arguments: devise
  #
  # Erreurs:
  # - Depot invalide (- ne peut pas etre utilise)
  # - Argument(s) en trop
  # - Devise specifiee non presente dans le depot
  # =================================
  desc 'Supprime une devise (et ses devises de conversion) du depot'
  arg_name 'devise'
  command :supprimer do |supprimer|
    supprimer.action do |global_options, options, args|
      devise = args.shift
      erreur_trop_arguments :supprimer, *args unless args.empty?

      ENTREPOT.supprimer(a_nom: devise)
    end
  end

  # =================================
  # Commande lister
  #
  # Erreurs:
  # - Arguments en trop
  # =================================
  desc 'Liste toutes les devises du depot'
  skips_post
  command :lister do |lister|
    lister.desc 'Liste les donnees du depot au format brute (raw)'
    lister.switch [:r, :raw], negatable: false

    lister.action do |global_options, options, args|
      erreur_trop_arguments :lister, *args unless args.empty?

      if options[:raw]
        to_format = "to_#{FORMAT_BD_TEXTE}".to_sym
        puts ENTREPOT.les_taux.map { |d| d.send(to_format) }
      else
        puts ENTREPOT.les_taux.map { |d| d.nom }
      end
    end
  end

  # =================================
  # Commande taux_devise
  #
  # Arguments: [--precision] devise devise_conversion
  #
  # Erreurs:
  # - Arguments en trop
  # - Precision invalide (flag --precision)
  # - Devise specifiee non presente dans le depot
  # - Taux non disponible pour la devise de conversion specifiee
  # =================================
  desc 'Retourne la valeur d\'une devise par rapport a une autre'
  arg_name 'devise devise_conversion'
  skips_post
  command :taux_devise do |taux_devise|
    taux_devise.desc 'Nombre de chiffres apres la virgule pour le taux affiche'
    taux_devise.flag :precision, must_match: /^[0-9]+$/

    taux_devise.action do |global_options, options, args|
      erreur_nombre_incorrect_arguments(:taux_devise, *args) if args.size != 2

      devise, devise_conversion = args.shift(2)
      erreur_trop_arguments(:taux_devise, *args) unless args.empty?

      obj_devise = ENTREPOT.selectionner(devise)
      erreur "Devise '#{devise}' non presente dans le depot" if obj_devise.nil?

      obj_devise_conversion = obj_devise.devise_conversion(devise_conversion)
      erreur "Taux non disponible pour la devise de conversion '#{devise_conversion}'" if obj_devise_conversion.nil?

      if options[:precision]
        puts obj_devise_conversion.taux_texte(options[:precision].to_i)
      else
        puts obj_devise_conversion.taux_texte
      end
    end
  end

  # =================================
  # Commande init
  #
  # Arguments: [-d|--detruire]
  #
  # Erreurs:
  #  - Le depot existe deja et l'option --detruire n'a pas ete indiquee
  #  - Argument(s) en trop
  # =================================
  desc "Cree une nouvelle base de donnees pour gerer des taux (dans './#{DEPOT_DEFAUT}' si --depot n'est pas specifie)"
  skips_pre
  skips_post
  command :init do |init|
    init.desc 'Detruit le fichier du depot s\'il existe deja'
    init.switch [:d, :detruire]

    init.action do |global_options, options, _args|
      BD.init(global_options[:depot], detruire: options[:detruire])
    end
  end

  on_error do |exception|
    case exception
    when GLI::MissingRequiredArgumentsException
      STDERR.puts "*** Erreur: arguments en trop: #{ARGV.join(' ')}"
    when GLI::UnknownCommandArgument
      STDERR.puts "*** Erreur: argument ou option de commande invalide: #{ARGV.join(' ')}"
    when GT::Exception
      STDERR.puts "*** Erreur: #{exception.message}"
    else
      STDERR.puts "*** Oops! Exception signalee durant l'execution de #{$PROGRAM_NAME} ***"
      STDERR.puts exception.message
      STDERR.puts exception.inspect
      STDERR.puts exception.backtrace
    end
  end

  # =====================================================
  # Pre/post hook des commandes et lancement du programme
  # =====================================================

  COMMANDES_MODIFIANT_DEPOT = [:ajouter, :supprimer]

  pre do |global_options, command, _options, _args|
    depot = global_options[:stdin] ? '-' : global_options[:depot]

    if COMMANDES_MODIFIANT_DEPOT.include?(command.name)
      erreur "Le flux stdin ne peut pas etre utilise pour la commande #{command.name}." if depot == '-'
    end

    ENTREPOT.ouvrir(depot, BD)

    true
  end

  post do |_global_options,_command,_options,_args|
    ENTREPOT.fermer
  end
end

# ========================================
# Methodes pour le traitement des erreurs.
# @author Guy Tremblay
# ========================================

def erreur(msg)
  raise GT::Exception, msg
end

def erreur_trop_arguments(commande, *args)
  erreur "#{commande}: arguments en trop: #{args.join(' ')}"
end

def erreur_nombre_incorrect_arguments(commande, *args)
  erreur "#{commande}: nombre incorrect d'arguments: #{args.join(' ')}"
end

exit App.run(ARGV)
